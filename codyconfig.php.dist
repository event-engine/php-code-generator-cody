<?php

/**
 * @see       https://github.com/event-engine/php-code-generator-cody for the canonical source repository
 * @copyright https://github.com/event-engine/php-code-generator-cody/blob/master/COPYRIGHT.md
 * @license   https://github.com/event-engine/php-code-generator-cody/blob/master/LICENSE.md MIT License
 */

declare(strict_types=1);

use EventEngine\CodeGenerator\Cody\Aggregate;
use EventEngine\CodeGenerator\Cody\Command;
use EventEngine\CodeGenerator\Cody\Context;
use EventEngine\CodeGenerator\Cody\Document;
use EventEngine\CodeGenerator\Cody\Event;
use EventEngine\CodeGenerator\EventEngineAst\Config\EventEngineConfig;
use EventEngine\CodeGenerator\EventEngineAst\Config\PreConfiguredNaming;
use EventEngine\InspectioCody\CodyConfig;
use EventEngine\InspectioGraphCody\EventSourcingAnalyzer;
use EventEngine\InspectioGraphCody\EventSourcingGraph;
use EventEngine\CodeGenerator\EventEngineAst\Metadata;

/**
 * business application is mounted to /service in docker-compose.yml
 */
$contextName = 'YOUR_CONTEXT_NAME'; // e.g. Acme
$basePath = '/service';
$codingStandardFile = $basePath . DIRECTORY_SEPARATOR . '.phpcs.xml.dist';

/**
 * DON'T CHANGE ANY LINES FROM HERE
 */

$composerFile = $basePath . '/composer.json';

$config = new EventEngineConfig();
$config->setBasePath($basePath);
$config->addComposerInfo($composerFile);

$namingConfig = new PreConfiguredNaming($config);
$namingConfig->setDefaultContextName($contextName);

$analyzer = new EventSourcingAnalyzer(
    new EventSourcingGraph(
        $config->getFilterConstName(),
        new Metadata\MetadataFactory(new Metadata\InspectioJson\MetadataFactory())
    )
);

$context = new Context($analyzer);

return new CodyConfig(
    $context,
    [
        CodyConfig::HOOK_ON_AGGREGATE => new Aggregate($namingConfig),
        CodyConfig::HOOK_ON_COMMAND => new Command($namingConfig),
        CodyConfig::HOOK_ON_EVENT => new Event($namingConfig),
        CodyConfig::HOOK_ON_DOCUMENT => new Document($namingConfig),
    ]
);
