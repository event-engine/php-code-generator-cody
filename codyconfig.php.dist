<?php

/**
 * @see       https://github.com/event-engine/php-code-generator-cody for the canonical source repository
 * @copyright https://github.com/event-engine/php-code-generator-cody/blob/master/COPYRIGHT.md
 * @license   https://github.com/event-engine/php-code-generator-cody/blob/master/LICENSE.md MIT License
 */

declare(strict_types=1);

use EventEngine\CodeGenerator\Cody\Aggregate;
use EventEngine\CodeGenerator\Cody\Command;
use EventEngine\CodeGenerator\Cody\Context;
use EventEngine\CodeGenerator\Cody\Event;
use EventEngine\CodeGenerator\EventEngineAst\Config\PreConfiguredAggregate;
use EventEngine\CodeGenerator\EventEngineAst\Config\PreConfiguredCommand;
use EventEngine\CodeGenerator\EventEngineAst\Config\PreConfiguredEvent;
use EventEngine\InspectioCody\CodyConfig;

/**
 * business application is mounted to /service in docker-compose.yml
 */
$context = new Context(
    'Inspectio\\Board',
    'InspectIO',
    '/service/src'
);

$aggregateConfig = new PreConfiguredAggregate();
$aggregateConfig->setBasePath('/service');
$aggregateConfig->setClassInfoList($context->classInfoList);

$commandConfig = new PreConfiguredCommand();
$commandConfig->setBasePath('/service');
$commandConfig->setClassInfoList($context->classInfoList);

$eventConfig = new PreConfiguredEvent();
$eventConfig->setBasePath('/service');
$eventConfig->setClassInfoList($context->classInfoList);

return new CodyConfig(
    $context,
    [
        CodyConfig::HOOK_ON_AGGREGATE => new Aggregate($aggregateConfig),
        CodyConfig::HOOK_ON_COMMAND => new Command($commandConfig),
        CodyConfig::HOOK_ON_EVENT => new Event($eventConfig),
    ]
);
